{"version":3,"sources":["enums/todo-list/index.ts","helpers/router/index.ts","pages/service/error404/index.tsx","store/user/constants.ts","store/user/index.ts","helpers/user/index.ts","store/notes/index.ts","store/passwords/index.ts","models/index.ts","helpers/database/index.ts","helpers/mappers/index.ts","models/todo/TodoIteModel.ts","models/todo/TodoGroupModel.ts","store/todo-list/index.ts","store/page-view/index.ts","models/user/UserModel.ts","store/index.ts","pages/todo-list/types.ts","icons/Star.tsx","pages/todo-list/components/todo-list/styles.ts","pages/todo-list/components/todo-list/AddListItem.tsx","pages/todo-list/components/todo-list/TodoList.tsx","pages/todo-list/components/todo-list/TodoListItem.tsx","pages/todo-list/components/TodoGroupControl.tsx","types/todo-list/index.ts","components/editable-title/index.tsx","pages/todo-list/components/todo-list/TodoIcon.tsx","components/textarea/index.tsx","pages/todo-list/components/DescriptionTextarea.tsx","pages/todo-list/components/RightSide.tsx","pages/todo-list/components/TodoListContent.tsx","pages/todo-list/views/main.tsx","pages/todo-list/utils/useTodoListFilter.ts","pages/index.tsx","App.tsx","index.tsx"],"names":["TodoDefaultListGroup","routes","Error404","DEFAULT_USERNAME","UserStore","data","makeAutoObservable","this","Boolean","id","username","parsed","split","length","toUpperCase","slice","join","createUsernameSymbols","NotesStore","PasswordStore","db","name","version","displayName","size","window","openDatabase","Error","sqlQuery","query","args","Promise","resolve","reject","transaction","tx","executeSql","result","error","createQueryHandler","modelInitRunner","model","a","rows","init","mapSqlResultToArray","Array","from","fill","map","_","index","item","TodoItemModel","MODEL_NAME","title","description","state","type","groupId","userId","steps","orderIndex","JSON","stringify","Date","getTime","insertId","selectById","itemId","priority","rest","parse","rowsAffected","TodoGroupModel","getById","removeByGroupId","TodoListStore","groups","items","loadData","reduce","acc","Object","assign","itemsGroupMap","concat","All","Priority","filter","Today","dateCreate","isToday","itemsMapForGroups","selectAllForUserId","group","add","addedGroup","push","removeById","addedItem","value","findIndex","update","updatedItem","PageViewStore","expandedSideBar","currentUserId","toggleExpanded","savedSettingsJson","localStorage","getItem","addEventListener","setItem","savedSettings","key","UserModel","password","privateKey","settings","then","initial","pageView","user","todoList","reaction","selectUserById","loadedUser","ItemsFilter","Star","filled","restProps","stroke","viewBox","height","width","xmlns","d","Container","styled","div","TodoListElement","List","LIST_ITEM_STYLE","css","ListItem","Item","AddItemContainer","ItemIcon","ItemContent","AddListItem","onAddItem","placeholder","useState","focused","setFocused","setValue","onRemoveFocused","useCallback","onPressEnterHandler","event","isShowInput","onClick","className","FlexboxGrid","align","justify","Input","autoFocus","onChange","onPressEnter","onBlur","TodoList","children","addPlaceholder","TodoListItem","icon","postfix","active","contextMenuId","contextMenuUId","content","colspan","NavContainer","ListTasksContainer","TopListTasksContainer","StyledTodoList","CountItemsContainer","StyledListItem","observer","activeKey","changeActiveGroup","onAddGroup","addGroup","onDeleteGroup","_target","_data","context","Number","parentElement","dataset","uid","removeGroup","Dropdown","Menu","countItemsInGroup","Divider","TodoState","span","EditableTitle","onSave","onSaveHandler","useEffect","val","StyledSvg","svg","Empty","Success","FilledSuccess","TodoIcon","InProgress","hovered","Done","Textarea","style","props","ref","useRef","autosize","current","as","resize","DescriptionTextarea","onEdit","currentValue","setCurrentValue","ScrollContainer","TitleContainer","ListContainer","RightSide","selectedId","onClose","onChangeState","todoMap","useMemo","lastChanged","onUpdateTitle","updateItem","onAddStep","onRemoveStep","stepId","onEditStepTitle","newSteps","onEditStepState","isDone","IconButton","appearance","formatDistance","includeSeconds","removeItem","StyledContent","Content","Title","h3","StepsState","changeFilter","setSelectedId","itemsMap","onCloseRightSide","center","right","addItem","todoId","newState","onRemoveItem","onChangeItemsFilter","zIndex","ButtonToolbar","ButtonGroup","Button","stopPropagation","newValue","completedCount","search","useLocation","history","useHistory","String","replace","useTodoListFilter","Routes","exact","path","component","to","LogoContainer","LogoTitle","StyledSidebar","Sidebar","TogglerButton","UserAvatar","Avatar","ExpandedToggler","expanded","circle","pathname","CustomProvider","theme","collapsible","Sidenav","Header","Body","Nav","eventKey","Link","placement","usernameSymbols","divider","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.97335323.chunk.js","sourcesContent":["export enum TodoDefaultListGroup {\r\n  All = -1,\r\n  Today = -2,\r\n  Priority = -3,\r\n}\r\n","export const routes = {\r\n  ROOT: \"/\",\r\n  LOGIN: \"/login\",\r\n  REGISTRATION: \"/registration\",\r\n  TODO_LIST: \"/todo-list\",\r\n  NOTES: \"/notes\",\r\n  PASSWORDS: \"/passwords\",\r\n  SETTINGS: \"/settings\",\r\n};\r\n","const Error404 = () => (\r\n  <div>\r\n    <h2>Error 404!</h2>\r\n    <h5>Page not found!</h5>\r\n  </div>\r\n);\r\n\r\nexport default Error404;\r\n","export const DEFAULT_USER_ID = 1;\r\n\r\nexport const DEFAULT_USERNAME = \"Yerzhan\";\r\n","import { makeAutoObservable } from \"mobx\";\r\n\r\nimport { createUsernameSymbols } from \"../../helpers/user\";\r\nimport { User } from \"../../types/user\";\r\nimport { DEFAULT_USERNAME, DEFAULT_USER_ID } from \"./constants\";\r\n\r\nclass UserStore {\r\n  public data: User | null = null;\r\n\r\n  constructor() {\r\n    makeAutoObservable(this);\r\n  }\r\n\r\n  public get authorized(): boolean {\r\n    return Boolean(this.data);\r\n  }\r\n\r\n  public get userId() {\r\n    return this.data?.id || DEFAULT_USER_ID;\r\n  }\r\n\r\n  public get usernameSymbols() {\r\n    return createUsernameSymbols(this.username);\r\n  }\r\n\r\n  public get username() {\r\n    return this.data?.username || DEFAULT_USERNAME;\r\n  }\r\n}\r\n\r\nexport default UserStore;\r\n","export const createUsernameSymbols = (username: string) => {\r\n  const parsed = username.split(\" \");\r\n\r\n  if (parsed.length === 1) {\r\n    return (username[0] + username[1]).toUpperCase();\r\n  }\r\n\r\n  return parsed.slice(0, 2).join(\"\").toUpperCase();\r\n};\r\n","import { makeAutoObservable } from \"mobx\";\r\n\r\nclass NotesStore {\r\n  constructor() {\r\n    makeAutoObservable(this);\r\n  }\r\n}\r\n\r\nexport default NotesStore;\r\n","import { makeAutoObservable } from \"mobx\";\r\n\r\nclass PasswordStore {\r\n  constructor() {\r\n    makeAutoObservable(this);\r\n  }\r\n}\r\n\r\nexport default PasswordStore;\r\n","import config from \"../config.json\";\r\nimport { createQueryHandler } from \"../helpers/database\";\r\nimport { SQLQueryResult } from \"../types/database\";\r\n\r\nconst {\r\n  db: { name, version, displayName, size },\r\n} = config;\r\n\r\nconst db = window.openDatabase(name, version, displayName, size);\r\n\r\nif (db === null) {\r\n  throw Error(\"Database not connected!\");\r\n}\r\n\r\nconst sqlQuery = createQueryHandler(db);\r\n\r\nconst modelInitRunner = async (model: {\r\n  name: string;\r\n  init: () => Promise<SQLQueryResult>;\r\n}) => {\r\n  const {\r\n    result: { rows },\r\n  } = await sqlQuery(\r\n    `SELECT * FROM sqlite_master WHERE type='table' AND name=?`,\r\n    [model.name]\r\n  );\r\n\r\n  if (!rows.length) {\r\n    await model.init();\r\n\r\n    return Promise.resolve(true);\r\n  }\r\n\r\n  return Promise.resolve(false);\r\n};\r\n\r\nexport { db, sqlQuery, modelInitRunner };\r\n","import { SQLQueryResult } from \"../../types/database\";\r\n\r\nexport const createQueryHandler =\r\n  (db: Database) =>\r\n  (query: string, args: ObjectArray = []) =>\r\n    new Promise<SQLQueryResult>((resolve, reject) =>\r\n      db.transaction((tx) =>\r\n        tx.executeSql(\r\n          query,\r\n          args,\r\n          (tx, result) => resolve({ tx, result }),\r\n          (tx, error) => {\r\n            reject({ tx, error });\r\n\r\n            return true;\r\n          }\r\n        )\r\n      )\r\n    );\r\n","export const mapSqlResultToArray = ({ rows }: SQLResultSet) =>\r\n  Array.from({ length: rows.length })\r\n    .fill(0)\r\n    .map((_, index) => rows.item(index));\r\n","import { modelInitRunner, sqlQuery } from \"..\";\r\nimport { mapSqlResultToArray } from \"../../helpers/mappers\";\r\nimport { TodoItem } from \"../../types/todo-list\";\r\n\r\nclass TodoItemModel {\r\n  private static MODEL_NAME = \"todo_item_model\";\r\n\r\n  public static init() {\r\n    return sqlQuery(\r\n      `CREATE TABLE ${this.MODEL_NAME} (\r\n          id INTEGER PRIMARY KEY, \r\n          title TEXT, \r\n          description TEXT, \r\n          state INTEGER,\r\n          type INTEGER,\r\n          groupId INTEGER, \r\n          userId INTEGER, \r\n          orderIndex INTEGER, \r\n          steps TEXT, \r\n          dateCreate REAL, \r\n          priority BOOL, \r\n          lastChanged REAL\r\n        )`\r\n    );\r\n  }\r\n\r\n  public static async add({\r\n    title,\r\n    description,\r\n    state,\r\n    type,\r\n    groupId,\r\n    userId,\r\n    steps,\r\n    orderIndex,\r\n  }: Omit<TodoItem, \"id\" | \"lastChanged\" | \"dateCreate\" | \"priority\">) {\r\n    const { result } = await sqlQuery(\r\n      `INSERT INTO ${this.MODEL_NAME} (title, description, state, type, groupId, userId, orderIndex, steps, dateCreate, priority) values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,\r\n      [\r\n        title,\r\n        description,\r\n        state,\r\n        type,\r\n        groupId,\r\n        userId,\r\n        orderIndex,\r\n        JSON.stringify(steps),\r\n        new Date().getTime(),\r\n        false,\r\n      ]\r\n    );\r\n\r\n    if (result.insertId) {\r\n      return TodoItemModel.selectById(result.insertId);\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  public static async selectById(itemId: number) {\r\n    const { result } = await sqlQuery(\r\n      `SELECT * FROM ${this.MODEL_NAME} WHERE id = ?`,\r\n      [itemId]\r\n    );\r\n\r\n    if (!result.rows.length) {\r\n      return null;\r\n    }\r\n\r\n    const { steps, priority, ...rest } = result.rows.item(0);\r\n\r\n    return { steps: JSON.parse(steps), priority: priority === \"true\", ...rest };\r\n  }\r\n\r\n  public static async selectAllForUserId(userId: number): Promise<TodoItem[]> {\r\n    const { result } = await sqlQuery(\r\n      `SELECT * FROM ${this.MODEL_NAME} WHERE userId = ?`,\r\n      [userId]\r\n    );\r\n\r\n    return mapSqlResultToArray(result).map(\r\n      ({ steps = \"[]\", priority, ...rest }) => ({\r\n        steps: JSON.parse(steps),\r\n        priority: priority === \"true\",\r\n        ...rest,\r\n      })\r\n    );\r\n  }\r\n\r\n  public static async update({\r\n    id,\r\n    steps,\r\n    title,\r\n    description,\r\n    state,\r\n    type,\r\n    groupId,\r\n    userId,\r\n    orderIndex,\r\n    priority,\r\n  }: TodoItem) {\r\n    const { result } = await sqlQuery(\r\n      `UPDATE ${this.MODEL_NAME} SET title = ?, description = ?, state = ?, type = ?, groupId = ?, userId = ?, orderIndex = ?, steps = ?, priority = ?, lastChanged = ? WHERE id = ?`,\r\n      [\r\n        title,\r\n        description,\r\n        state,\r\n        type,\r\n        groupId,\r\n        userId,\r\n        orderIndex,\r\n        JSON.stringify(steps),\r\n        priority,\r\n        new Date().getTime(),\r\n        id,\r\n      ]\r\n    );\r\n\r\n    if (result.rowsAffected === 1) {\r\n      return TodoItemModel.selectById(id);\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  public static async removeByGroupId(groupId: number): Promise<boolean> {\r\n    await sqlQuery(`DELETE FROM ${this.MODEL_NAME} WHERE groupId = ?`, [\r\n      groupId,\r\n    ]);\r\n\r\n    return true;\r\n  }\r\n\r\n  public static async removeById(id: number) {\r\n    const { result } = await sqlQuery(\r\n      `DELETE FROM ${this.MODEL_NAME} WHERE id = ?`,\r\n      [id]\r\n    );\r\n\r\n    return result.rowsAffected > 0;\r\n  }\r\n}\r\n\r\nmodelInitRunner(TodoItemModel);\r\n\r\nexport default TodoItemModel;\r\n","import { modelInitRunner, sqlQuery } from \"..\";\r\nimport { mapSqlResultToArray } from \"../../helpers/mappers\";\r\nimport { TodoGroup } from \"../../types/todo-list\";\r\nimport TodoItemModel from \"./TodoIteModel\";\r\n\r\nclass TodoGroupModel {\r\n  private static MODEL_NAME = \"todo_group_model\";\r\n\r\n  public static init() {\r\n    return sqlQuery(\r\n      `CREATE TABLE ${this.MODEL_NAME} (\r\n          id INTEGER PRIMARY KEY, \r\n          title TEXT,\r\n          orderIndex INTEGER,\r\n          userId INTEGER\r\n        )`\r\n    );\r\n  }\r\n\r\n  public static async getById(groupId: number) {\r\n    const { result } = await sqlQuery(\r\n      `SELECT * FROM ${this.MODEL_NAME} WHERE id = ?`,\r\n      [groupId]\r\n    );\r\n\r\n    if (result.rows.length) {\r\n      return result.rows.item(0);\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  public static async add({\r\n    title,\r\n    orderIndex,\r\n    userId,\r\n  }: Partial<Omit<TodoGroup, \"id\">>) {\r\n    const { result } = await sqlQuery(\r\n      `INSERT INTO ${this.MODEL_NAME} (title, orderIndex, userId) values(?, ?, ?)`,\r\n      [title, orderIndex, userId]\r\n    );\r\n\r\n    if (result.insertId) {\r\n      return await TodoGroupModel.getById(result.insertId);\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  public static async selectAllForUserId(userId: number): Promise<TodoGroup[]> {\r\n    const { result } = await sqlQuery(\r\n      `SELECT * FROM ${this.MODEL_NAME} WHERE userId = ?`,\r\n      [userId]\r\n    );\r\n\r\n    return mapSqlResultToArray(result);\r\n  }\r\n\r\n  public static async removeById(groupId: number): Promise<boolean> {\r\n    const { result } = await sqlQuery(\r\n      `DELETE FROM ${this.MODEL_NAME} WHERE id = ?`,\r\n      [groupId]\r\n    );\r\n\r\n    return (\r\n      result.rowsAffected === 1 &&\r\n      (await TodoItemModel.removeByGroupId(groupId))\r\n    );\r\n  }\r\n}\r\n\r\nmodelInitRunner(TodoGroupModel);\r\n\r\nexport default TodoGroupModel;\r\n","import { isToday } from \"date-fns\";\r\nimport { makeAutoObservable } from \"mobx\";\r\nimport { TodoDefaultListGroup } from \"../../enums/todo-list\";\r\nimport TodoGroupModel from \"../../models/todo/TodoGroupModel\";\r\nimport TodoItemModel from \"../../models/todo/TodoIteModel\";\r\nimport { TodoGroup, TodoItem } from \"../../types/todo-list\";\r\n\r\ninterface ItemsMap {\r\n  [key: string | number]: TodoItem[];\r\n}\r\n\r\nclass TodoListStore {\r\n  public groups: TodoGroup[] = [];\r\n  public items: TodoItem[] = [];\r\n\r\n  constructor(userId: number) {\r\n    makeAutoObservable(this);\r\n\r\n    this.loadData(userId);\r\n  }\r\n\r\n  public get todoMap(): Record<number, TodoItem> {\r\n    return this.items.reduce(\r\n      (acc, item) => Object.assign(acc, { [item.id]: item }),\r\n      {}\r\n    );\r\n  }\r\n\r\n  public get itemsMapForGroups(): ItemsMap {\r\n    const itemsGroupMap = this.items.reduce(\r\n      (acc, item) =>\r\n        Object.assign(acc, {\r\n          [item.groupId]: (acc[item.groupId] || []).concat(item),\r\n        }),\r\n      {} as ItemsMap\r\n    );\r\n\r\n    return {\r\n      ...itemsGroupMap,\r\n      [TodoDefaultListGroup.All]: this.items,\r\n      [TodoDefaultListGroup.Priority]: this.items.filter(\r\n        ({ priority }) => priority\r\n      ),\r\n      [TodoDefaultListGroup.Today]: this.items.filter(({ dateCreate }) =>\r\n        isToday(dateCreate)\r\n      ),\r\n    };\r\n  }\r\n\r\n  public countItemsInGroup(groupId: number | TodoDefaultListGroup) {\r\n    return this.itemsMapForGroups[groupId]?.length || 0;\r\n  }\r\n\r\n  public async loadData(userId: number) {\r\n    this.groups = await TodoGroupModel.selectAllForUserId(userId);\r\n    this.items = await TodoItemModel.selectAllForUserId(userId);\r\n  }\r\n\r\n  public async addGroup(group: Partial<Omit<TodoGroup, \"id\">>) {\r\n    const addedGroup = await TodoGroupModel.add(group);\r\n\r\n    this.groups.push(addedGroup);\r\n  }\r\n\r\n  public async removeGroup(groupId: number) {\r\n    const removeSuccess = await TodoGroupModel.removeById(groupId);\r\n\r\n    if (removeSuccess) {\r\n      this.groups = this.groups.filter(({ id }) => id !== groupId);\r\n      this.items = this.items.filter(\r\n        ({ groupId: _groupId }) => _groupId !== groupId\r\n      );\r\n    }\r\n  }\r\n\r\n  public async removeItem(itemId: number) {\r\n    const removeSuccess = await TodoItemModel.removeById(itemId);\r\n\r\n    if (removeSuccess) {\r\n      this.items = this.items.filter(({ id }) => id !== itemId);\r\n    }\r\n  }\r\n\r\n  public async addItem(\r\n    item: Omit<TodoItem, \"id\" | \"lastChanged\" | \"dateCreate\" | \"priority\">\r\n  ) {\r\n    const addedItem = await TodoItemModel.add(item);\r\n\r\n    this.items.push(addedItem);\r\n\r\n    return addedItem;\r\n  }\r\n\r\n  public async updateItem(id: number, value: Partial<TodoItem>) {\r\n    const index = this.items.findIndex(({ id: _id }) => _id === id)!;\r\n    const updatedItem = await TodoItemModel.update({\r\n      ...this.items[index],\r\n      ...value,\r\n    });\r\n\r\n    this.items[index] = updatedItem;\r\n  }\r\n}\r\n\r\nexport default TodoListStore;\r\n","import { makeAutoObservable } from \"mobx\";\r\nimport { DEFAULT_USER_ID } from \"../user/constants\";\r\n\r\nclass PageViewStore {\r\n  public expandedSideBar = true;\r\n  public currentUserId = DEFAULT_USER_ID;\r\n\r\n  constructor() {\r\n    makeAutoObservable(this);\r\n\r\n    const savedSettingsJson = localStorage.getItem(\"page-settings\");\r\n\r\n    window.addEventListener(\"unload\", () => {\r\n      localStorage.setItem(\"page-settings\", JSON.stringify(this));\r\n    });\r\n\r\n    if (savedSettingsJson === null) {\r\n      return;\r\n    }\r\n\r\n    const savedSettings = JSON.parse(savedSettingsJson);\r\n\r\n    for (const key in savedSettings) {\r\n      if (key in this) {\r\n        (this as any)[key] = savedSettings[key];\r\n      }\r\n    }\r\n  }\r\n\r\n  public toggleExpanded = () => {\r\n    this.expandedSideBar = !this.expandedSideBar;\r\n  };\r\n}\r\n\r\nexport default PageViewStore;\r\n","import { modelInitRunner, sqlQuery } from \"..\";\r\nimport { DEFAULT_USERNAME } from \"../../store/user/constants\";\r\nimport { SQLQueryResult } from \"../../types/database\";\r\nimport { User, UserFull } from \"../../types/user\";\r\n\r\nclass UserModel {\r\n  private static MODEL_NAME = \"user\";\r\n\r\n  public static init(): Promise<SQLQueryResult> {\r\n    return sqlQuery(\r\n      `CREATE TABLE ${this.MODEL_NAME} (id INTEGER PRIMARY KEY, username TEXT, settings TEXT, password TEXT, privateKey TEXT, lastLogin REAL)`\r\n    );\r\n  }\r\n\r\n  public static add({\r\n    username = DEFAULT_USERNAME,\r\n    password = null,\r\n    privateKey = null,\r\n    settings = \"{}\",\r\n  }: Partial<Omit<UserFull, \"id\">>) {\r\n    return sqlQuery(\r\n      `INSERT INTO ${this.MODEL_NAME} (username, settings, password, privateKey) values(?, ?, ?, ?)`,\r\n      [username, settings, password, privateKey]\r\n    );\r\n  }\r\n\r\n  public static async selectUserById(userId: number): Promise<User> {\r\n    const { result } = await sqlQuery(\r\n      \"SELECT id, username, settings, lastLogin FROM ? WHERE id = ?\",\r\n      [this.MODEL_NAME, userId]\r\n    );\r\n\r\n    return result.rows.item(0);\r\n  }\r\n}\r\n\r\nmodelInitRunner(UserModel).then((initial) => {\r\n  if (initial) {\r\n    UserModel.add({});\r\n  }\r\n});\r\n\r\nexport default UserModel;\r\n","import UserStore from \"./user\";\r\nimport NotesStore from \"./notes\";\r\nimport PasswordStore from \"./passwords\";\r\nimport TodoListStore from \"./todo-list\";\r\nimport PageViewStore from \"./page-view\";\r\nimport { reaction } from \"mobx\";\r\nimport UserModel from \"../models/user/UserModel\";\r\n\r\nexport const pageView = new PageViewStore();\r\nexport const user = new UserStore();\r\nexport const notes = new NotesStore();\r\nexport const passwords = new PasswordStore();\r\nexport const todoList = new TodoListStore(pageView.currentUserId);\r\n\r\nreaction(\r\n  () => pageView.currentUserId,\r\n  async (userId) => {\r\n    const loadedUser = await UserModel.selectUserById(userId);\r\n\r\n    todoList.loadData(userId);\r\n\r\n    user.data = loadedUser;\r\n  }\r\n);\r\n","import { TodoDefaultListGroup } from \"../../enums/todo-list\";\r\n\r\nexport enum ItemsFilter {\r\n  All,\r\n  Done,\r\n  InProgress,\r\n}\r\n\r\nexport interface TodoListFilter {\r\n  group: string | number | TodoDefaultListGroup;\r\n  filter: ItemsFilter;\r\n}\r\n","import { FC } from \"react\";\r\n\r\ninterface StarProps extends React.SVGProps<SVGSVGElement> {\r\n  filled?: boolean;\r\n}\r\n\r\nconst Star: FC<StarProps> = ({ filled, ...restProps }) => (\r\n  <svg\r\n    stroke=\"currentColor\"\r\n    fill=\"currentColor\"\r\n    stroke-width=\"0\"\r\n    viewBox=\"0 0 24 24\"\r\n    height=\"1em\"\r\n    width=\"1em\"\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    {...restProps}\r\n  >\r\n    <g>\r\n      <path fill=\"none\" d=\"M0 0h24v24H0z\"></path>\r\n      {filled ? (\r\n        <path d=\"M12 17l-5.878 3.59 1.598-6.7-5.23-4.48 6.865-.55L12 2.5l2.645 6.36 6.866.55-5.231 4.48 1.598 6.7z\"></path>\r\n      ) : (\r\n        <path d=\"M12 18.26l-7.053 3.948 1.575-7.928L.587 8.792l8.027-.952L12 .5l3.386 7.34 8.027.952-5.935 5.488 1.575 7.928L12 18.26zm0-2.292l4.247 2.377-.949-4.773 3.573-3.305-4.833-.573L12 5.275l-2.038 4.42-4.833.572 3.573 3.305-.949 4.773L12 15.968z\"></path>\r\n      )}\r\n    </g>\r\n  </svg>\r\n);\r\n\r\nexport default Star;\r\n","import { List } from \"rsuite\";\r\nimport styled, { css } from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n  max-height: 100%;\r\n  height: 100%;\r\n`;\r\n\r\nexport const TodoListElement = styled(List)`\r\n  box-shadow: none;\r\n  height: 100%;\r\n\r\n  &[data-hasAdded=\"true\"] {\r\n    height: calc(100% - 56px);\r\n  }\r\n\r\n  /* background-image: url('data:image/svg+xml,<svg viewBox=\"0 0 1000 40\" xmlns=\"http://www.w3.org/2000/svg\"><line x1=\"0\" y1=\"0\" x2=\"1000\" y2=\"0\" stroke=\"currentColor\" /></svg>'); */\r\n`;\r\n\r\nconst LIST_ITEM_STYLE = css`\r\n  border-radius: 4px;\r\n  background: var(--rs-gray-800);\r\n\r\n  & svg {\r\n    display: flex;\r\n    height: 16px;\r\n    width: auto;\r\n  }\r\n\r\n  &:hover {\r\n    background: var(--rs-gray-800);\r\n  }\r\n`;\r\n\r\nexport const ListItem = styled(List.Item)`\r\n  ${LIST_ITEM_STYLE}\r\n  box-shadow: none;\r\n  cursor: pointer;\r\n  padding: 0px;\r\n\r\n  & > div {\r\n    padding: 10px 14px;\r\n  }\r\n\r\n  &:not(:last-child) {\r\n    margin-bottom: 5px;\r\n  }\r\n\r\n  & > div .content {\r\n    font-size: 15px;\r\n    word-break: break-all;\r\n  }\r\n\r\n  &[data-active=\"true\"] {\r\n    background: var(--rs-gray-800);\r\n    color: var(--rs-primary-700);\r\n    font-weight: bold;\r\n  }\r\n`;\r\n\r\nexport const AddItemContainer = styled.div`\r\n  ${LIST_ITEM_STYLE}\r\n  margin-top: 8px;\r\n  cursor: text;\r\n  padding: 10px 14px;\r\n\r\n  & > div > div:last-child {\r\n    flex: auto;\r\n    margin-left: 15px;\r\n  }\r\n\r\n  & p {\r\n    font-size: 16px;\r\n    margin: 3px 0px;\r\n    display: inline-block;\r\n    margin-left: 5px;\r\n  }\r\n\r\n  & input {\r\n    margin-left: -5px;\r\n    background: transparent;\r\n  }\r\n\r\n  & input,\r\n  input:focus {\r\n    border: none;\r\n    box-shadow: none;\r\n  }\r\n`;\r\n\r\nexport const ItemIcon = styled.div`\r\n  width: 30px;\r\n`;\r\n\r\nexport const ItemContent = styled.div`\r\n  width: calc(100% - 30px);\r\n`;\r\n","import { FC, useCallback, useState } from \"react\";\r\nimport { FlexboxGrid, Input } from \"rsuite\";\r\n\r\nimport { AddItemContainer } from \"./styles\";\r\n\r\nimport PlusIcon from \"@rsuite/icons/Plus\";\r\nimport AddOutlineIcon from \"@rsuite/icons/AddOutline\";\r\n\r\ninterface AddListItemProps {\r\n  onAddItem: (title: string) => boolean;\r\n  placeholder?: string;\r\n}\r\n\r\nconst AddListItem: FC<AddListItemProps> = ({\r\n  onAddItem,\r\n  placeholder = \"Add task\",\r\n}) => {\r\n  const [focused, setFocused] = useState(false);\r\n  const [value, setValue] = useState(\"\");\r\n\r\n  const onRemoveFocused = useCallback(() => setFocused(false), [setFocused]);\r\n\r\n  const onPressEnterHandler = useCallback(\r\n    (event) => {\r\n      if (onAddItem(value)) {\r\n        setValue(\"\");\r\n      }\r\n    },\r\n    [onAddItem, value]\r\n  );\r\n\r\n  const isShowInput = Boolean(value || focused);\r\n\r\n  return (\r\n    <AddItemContainer onClick={() => setFocused(true)} data-focused={focused} className=\"add-control\">\r\n      <FlexboxGrid align=\"middle\" justify=\"space-between\">\r\n        <FlexboxGrid.Item>\r\n          {isShowInput ? <AddOutlineIcon /> : <PlusIcon />}\r\n        </FlexboxGrid.Item>\r\n        <FlexboxGrid.Item>\r\n          {isShowInput ? (\r\n            <Input\r\n              size=\"sm\"\r\n              autoFocus\r\n              value={value}\r\n              onChange={(value) => setValue(value as string)}\r\n              onPressEnter={onPressEnterHandler}\r\n              placeholder=\"Typing todo title...\"\r\n              onBlur={onRemoveFocused}\r\n            />\r\n          ) : (\r\n            <p>{placeholder}</p>\r\n          )}\r\n        </FlexboxGrid.Item>\r\n      </FlexboxGrid>\r\n    </AddItemContainer>\r\n  );\r\n};\r\n\r\nexport default AddListItem;\r\n","import React, { FC } from \"react\";\r\nimport { ListProps } from \"rsuite\";\r\nimport AddListItem from \"./AddListItem\";\r\nimport { Container, TodoListElement } from \"./styles\";\r\n\r\ninterface TodoListProps extends ListProps {\r\n  children: React.ReactNode;\r\n  onAddItem?: (title: string) => boolean;\r\n  addPlaceholder?: string;\r\n}\r\n\r\nconst TodoList: FC<TodoListProps> = ({\r\n  children,\r\n  onAddItem,\r\n  addPlaceholder,\r\n  ...restProps\r\n}) => (\r\n  <Container>\r\n    <TodoListElement {...restProps} data-hasAdded={Boolean(onAddItem)}>\r\n      {children}\r\n    </TodoListElement>\r\n    {onAddItem && (\r\n      <AddListItem onAddItem={onAddItem} placeholder={addPlaceholder} />\r\n    )}\r\n  </Container>\r\n);\r\n\r\nexport default TodoList;\r\n","import React, { FC } from \"react\";\r\nimport { FlexboxGrid, ListItemProps } from \"rsuite\";\r\nimport { ItemContent, ItemIcon, ListItem } from \"./styles\";\r\nimport { ContextMenuTrigger } from \"react-contextmenu\";\r\n\r\ninterface TodoListItemProps extends ListItemProps {\r\n  icon?: React.ReactNode;\r\n  postfix?: React.ReactNode;\r\n  active?: boolean;\r\n  contextMenuId?: string;\r\n  contextMenuUId?: string | number;\r\n}\r\n\r\nconst TodoListItem: FC<TodoListItemProps> = ({\r\n  children,\r\n  icon,\r\n  postfix,\r\n  active = false,\r\n  contextMenuId,\r\n  contextMenuUId,\r\n  ...restProps\r\n}) => {\r\n  const content = (\r\n    <FlexboxGrid align=\"middle\" justify=\"space-between\">\r\n      <FlexboxGrid.Item\r\n        className=\"content flex-block flex-align-center\"\r\n        colspan={22}\r\n      >\r\n        <ItemIcon>{icon}</ItemIcon>\r\n        <ItemContent>{children}</ItemContent>\r\n      </FlexboxGrid.Item>\r\n      <FlexboxGrid.Item className=\"align-right\" colspan={2}>\r\n        {postfix}\r\n      </FlexboxGrid.Item>\r\n    </FlexboxGrid>\r\n  );\r\n\r\n  return (\r\n    <ListItem {...restProps} data-active={active} data-uid={contextMenuUId}>\r\n      {contextMenuId ? (\r\n        <ContextMenuTrigger id={contextMenuId}>{content}</ContextMenuTrigger>\r\n      ) : (\r\n        <div>{content}</div>\r\n      )}\r\n    </ListItem>\r\n  );\r\n};\r\n\r\nexport default TodoListItem;\r\n","import { FC, useCallback } from \"react\";\r\nimport { Divider, Dropdown } from \"rsuite\";\r\nimport { observer } from \"mobx-react\";\r\nimport styled from \"styled-components\";\r\n\r\nimport TimeIcon from \"@rsuite/icons/Time\";\r\nimport TrashIcon from \"@rsuite/icons/Trash\";\r\nimport AttachmentIcon from \"@rsuite/icons/Attachment\";\r\nimport ListIcon from \"@rsuite/icons/List\";\r\n\r\nimport { todoList, user } from \"../../../store\";\r\nimport { TodoDefaultListGroup } from \"../../../enums/todo-list\";\r\nimport Star from \"../../../icons/Star\";\r\n\r\nimport { TodoList, TodoListItem } from \"./todo-list\";\r\nimport { ContextMenu, MenuItem } from \"react-contextmenu\";\r\n\r\nconst NavContainer = styled.div`\r\n  height: 100vh;\r\n  width: 100%;\r\n  border-right: 1px solid var(--rs-divider-border);\r\n`;\r\n\r\nconst ListTasksContainer = styled.div`\r\n  height: calc(100vh - 145px);\r\n`;\r\n\r\nconst TopListTasksContainer = styled.div`\r\n  height: 145px;\r\n`;\r\n\r\nconst StyledTodoList = styled(TodoList)`\r\n  & + .add-control {\r\n    border-radius: 0;\r\n    background: transparent;\r\n    border-top: 1px solid var(--rs-divider-border);\r\n  }\r\n`;\r\n\r\nconst CountItemsContainer = styled.div`\r\n  color: var(--rs-gray-500);\r\n  font-size: 13px;\r\n`;\r\n\r\nconst StyledListItem = styled(TodoListItem)`\r\n  background: transparent;\r\n  margin: 5px;\r\n\r\n  svg {\r\n    height: 16px;\r\n    width: auto;\r\n  }\r\n`;\r\n\r\ninterface TodoGroupControlProps {\r\n  activeKey: string | number;\r\n  changeActiveGroup: (activeGroupId: number | TodoDefaultListGroup) => void;\r\n}\r\n\r\nconst TodoGroupControl: FC<TodoGroupControlProps> = ({\r\n  activeKey,\r\n  changeActiveGroup,\r\n}) => {\r\n  const { groups } = todoList;\r\n\r\n  const onAddGroup = useCallback(\r\n    (title: string) => {\r\n      todoList.addGroup({\r\n        title,\r\n        orderIndex: groups.length + 1,\r\n        userId: user.userId,\r\n      });\r\n\r\n      return true;\r\n    },\r\n    [groups]\r\n  );\r\n\r\n  const onDeleteGroup = useCallback((_target, _data, context) => {\r\n    const groupId = Number(context.parentElement?.dataset?.uid);\r\n\r\n    todoList.removeGroup(groupId);\r\n  }, []);\r\n\r\n  return (\r\n    <NavContainer>\r\n      <ContextMenu id=\"group-context\">\r\n        <Dropdown.Menu>\r\n          <MenuItem onClick={onDeleteGroup}>\r\n            <Dropdown.Item icon={<TrashIcon />} className=\"delete-button\">\r\n              Delete group\r\n            </Dropdown.Item>\r\n          </MenuItem>\r\n        </Dropdown.Menu>\r\n      </ContextMenu>\r\n      <TopListTasksContainer>\r\n        <StyledTodoList>\r\n          <StyledListItem\r\n            icon={<ListIcon />}\r\n            postfix={\r\n              <CountItemsContainer>\r\n                {todoList.countItemsInGroup(TodoDefaultListGroup.All) || \"\"}\r\n              </CountItemsContainer>\r\n            }\r\n            active={TodoDefaultListGroup.All === activeKey}\r\n            onClick={() => changeActiveGroup(TodoDefaultListGroup.All)}\r\n          >\r\n            All\r\n          </StyledListItem>\r\n\r\n          <StyledListItem\r\n            icon={<TimeIcon />}\r\n            postfix={\r\n              <CountItemsContainer>\r\n                {todoList.countItemsInGroup(TodoDefaultListGroup.Today) || \"\"}\r\n              </CountItemsContainer>\r\n            }\r\n            active={TodoDefaultListGroup.Today === activeKey}\r\n            onClick={() => changeActiveGroup(TodoDefaultListGroup.Today)}\r\n          >\r\n            Today\r\n          </StyledListItem>\r\n\r\n          <StyledListItem\r\n            icon={<Star />}\r\n            postfix={\r\n              <CountItemsContainer>\r\n                {todoList.countItemsInGroup(TodoDefaultListGroup.Priority) ||\r\n                  \"\"}\r\n              </CountItemsContainer>\r\n            }\r\n            active={TodoDefaultListGroup.Priority === activeKey}\r\n            onClick={() => changeActiveGroup(TodoDefaultListGroup.Priority)}\r\n          >\r\n            Priority\r\n          </StyledListItem>\r\n        </StyledTodoList>\r\n      </TopListTasksContainer>\r\n\r\n      <Divider className=\"reset-margin\" />\r\n\r\n      <ListTasksContainer>\r\n        <StyledTodoList onAddItem={onAddGroup} addPlaceholder=\"Add task group\">\r\n          {groups.map(({ id, title }) => (\r\n            <StyledListItem\r\n              contextMenuId=\"group-context\"\r\n              contextMenuUId={id}\r\n              icon={<AttachmentIcon />}\r\n              active={activeKey === id}\r\n              key={id}\r\n              postfix={\r\n                <CountItemsContainer>\r\n                  {todoList.countItemsInGroup(id) || \"\"}\r\n                </CountItemsContainer>\r\n              }\r\n              onClick={() => changeActiveGroup(id)}\r\n            >\r\n              {title}\r\n            </StyledListItem>\r\n          ))}\r\n        </StyledTodoList>\r\n      </ListTasksContainer>\r\n    </NavContainer>\r\n  );\r\n};\r\n\r\nexport default observer(TodoGroupControl);\r\n","export interface TodoGroup {\r\n  id: number;\r\n  title: string;\r\n  orderIndex: number;\r\n  userId: number;\r\n}\r\n\r\nexport enum TodoState {\r\n  InProgress,\r\n  Done,\r\n}\r\n\r\nexport interface TodoStep {\r\n  id: number;\r\n  title: string;\r\n  priority: boolean;\r\n  state: TodoState;\r\n}\r\n\r\nexport interface TodoItem {\r\n  id: number;\r\n  title: string;\r\n  description: string;\r\n  state: TodoState;\r\n  type: number; // ???\r\n  groupId: number;\r\n  userId: number;\r\n  orderIndex: number | null;\r\n  steps: TodoStep[];\r\n  dateCreate: number;\r\n  priority: boolean;\r\n  lastChanged: number | null;\r\n}\r\n","import { FC, useCallback, useEffect, useState } from \"react\";\r\nimport { Input } from \"rsuite\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Container = styled.span`\r\n  input,\r\n  input:focus {\r\n    padding: 0;\r\n    box-shadow: none;\r\n    border: none;\r\n    background: transparent;\r\n    font-size: inherit;\r\n  }\r\n`;\r\n\r\ninterface EditableTitleProps {\r\n  onSave: (title: string) => void;\r\n  children: string;\r\n}\r\n\r\nconst EditableTitle: FC<EditableTitleProps> = ({ children, onSave }) => {\r\n  const [value, setValue] = useState(children);\r\n\r\n  const onSaveHandler = useCallback(() => onSave(value), [onSave, value]);\r\n\r\n  useEffect(() => {\r\n    setValue(children);\r\n  }, [children]);\r\n\r\n  return (\r\n    <Container className=\"full-width\">\r\n      <Input\r\n        value={value}\r\n        onChange={(val) => setValue(val as string)}\r\n        onBlur={onSaveHandler}\r\n      />\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default EditableTitle;\r\n","import { FC } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { TodoState } from \"../../../../types/todo-list\";\r\n\r\nconst StyledSvg = styled.svg`\r\n  & .success {\r\n    visibility: hidden;\r\n  }\r\n\r\n  &[data-hovered=\"true\"]:hover .success,\r\n  &[data-show=\"true\"] .success {\r\n    visibility: visible;\r\n  }\r\n`;\r\n\r\nconst Container = styled.span`\r\n  display: flex;\r\n\r\n  & > svg {\r\n    min-height: 20px;\r\n    width: auto;\r\n    display: none;\r\n  }\r\n\r\n  .empty {\r\n    display: flex;\r\n  }\r\n\r\n  &:hover .empty {\r\n    display: none;\r\n  }\r\n\r\n  &:hover .success {\r\n    display: flex;\r\n  }\r\n\r\n  &[data-done=\"true\"] {\r\n    .empty,\r\n    .success {\r\n      display: none;\r\n    }\r\n\r\n    .filled-success {\r\n      display: flex;\r\n    }\r\n  }\r\n`;\r\n\r\ninterface TodoIconProps {\r\n  state?: TodoState;\r\n  hovered?: boolean;\r\n}\r\n\r\nconst Empty = () => (\r\n  <StyledSvg\r\n    stroke=\"currentColor\"\r\n    fill=\"currentColor\"\r\n    stroke-width=\"0\"\r\n    viewBox=\"0 0 24 24\"\r\n    height=\"1em\"\r\n    width=\"1em\"\r\n    className=\"empty\"\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n  >\r\n    <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z\"></path>\r\n  </StyledSvg>\r\n);\r\n\r\nconst Success = () => (\r\n  <StyledSvg\r\n    stroke=\"currentColor\"\r\n    fill=\"currentColor\"\r\n    stroke-width=\"0\"\r\n    viewBox=\"0 0 24 24\"\r\n    height=\"1em\"\r\n    width=\"1em\"\r\n    className=\"success\"\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n  >\r\n    <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm4.59-12.42L10 14.17l-2.59-2.58L6 13l4 4 8-8z\"></path>\r\n  </StyledSvg>\r\n);\r\n\r\nconst FilledSuccess = () => (\r\n  <StyledSvg\r\n    stroke=\"currentColor\"\r\n    fill=\"currentColor\"\r\n    stroke-width=\"0\"\r\n    viewBox=\"0 0 24 24\"\r\n    height=\"1em\"\r\n    width=\"1em\"\r\n    className=\"filled-success\"\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n  >\r\n    <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z\"></path>\r\n  </StyledSvg>\r\n);\r\n\r\nconst TodoIcon: FC<TodoIconProps> = ({\r\n  state = TodoState.InProgress,\r\n  hovered,\r\n}) => {\r\n  return (\r\n    <Container data-done={state === TodoState.Done} data-hovered={hovered}>\r\n      <Empty />\r\n      <Success />\r\n      <FilledSuccess />\r\n    </Container>\r\n  );\r\n};\r\nexport default TodoIcon;\r\n","import { FC, useEffect, useRef } from \"react\";\r\nimport { Input, InputProps } from \"rsuite\";\r\nimport autosize from \"autosize\";\r\n\r\ninterface TextareaProps extends InputProps {}\r\n\r\nconst Textarea: FC<TextareaProps> = ({ style, ...props }) => {\r\n  const ref = useRef<any>(null);\r\n\r\n  useEffect(() => {\r\n    autosize(ref.current);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    autosize.update(ref.current);\r\n  }, [props.value]);\r\n\r\n  return (\r\n    <Input\r\n      {...props}\r\n      as=\"textarea\"\r\n      ref={ref}\r\n      style={{ resize: \"none\", ...style }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Textarea;\r\n","import { FC, useEffect, useState } from \"react\";\r\nimport { InputProps } from \"rsuite\";\r\nimport Textarea from \"../../../components/textarea\";\r\n\r\ninterface DescriptionTextareaProps extends InputProps {\r\n  value: string;\r\n  onEdit: (value: string) => void;\r\n}\r\n\r\nconst DescriptionTextarea: FC<DescriptionTextareaProps> = ({\r\n  value,\r\n  onEdit,\r\n  ...rest\r\n}) => {\r\n  const [currentValue, setCurrentValue] = useState(value);\r\n\r\n  useEffect(() => {\r\n    setCurrentValue(value);\r\n  }, [value]);\r\n\r\n  return (\r\n    <Textarea\r\n      value={currentValue}\r\n      onChange={(value) => setCurrentValue(value as string)}\r\n      onBlur={() => onEdit(currentValue)}\r\n      {...rest}\r\n    />\r\n  );\r\n};\r\n\r\nexport default DescriptionTextarea;\r\n","import { FC, useCallback, useMemo } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport EditableTitle from \"../../../components/editable-title\";\r\nimport Star from \"../../../icons/Star\";\r\nimport { todoList } from \"../../../store\";\r\nimport TodoIcon from \"./todo-list/TodoIcon\";\r\nimport { TodoList, TodoListItem } from \"./todo-list\";\r\nimport { TodoState } from \"../../../types/todo-list\";\r\nimport CloseIcon from \"@rsuite/icons/Close\";\r\nimport { FlexboxGrid, IconButton } from \"rsuite\";\r\nimport ArrowRightIcon from \"@rsuite/icons/ArrowRight\";\r\nimport TrashIcon from \"@rsuite/icons/Trash\";\r\nimport { formatDistance } from \"date-fns\";\r\nimport DescriptionTextarea from \"./DescriptionTextarea\";\r\n\r\nconst Container = styled.div`\r\n  height: 100vh;\r\n  border-left: 1px solid var(--rs-divider-border);\r\n`;\r\n\r\nconst ScrollContainer = styled.div`\r\n  height: calc(100vh - 56px);\r\n  overflow-y: auto;\r\n  padding: 15px;\r\n`;\r\n\r\nconst TitleContainer = styled.div`\r\n  margin-bottom: 20px;\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  & h4 {\r\n    flex: auto;\r\n    font-weight: normal;\r\n    margin-left: 15px;\r\n  }\r\n\r\n  & svg {\r\n    height: 22px;\r\n    width: auto;\r\n  }\r\n\r\n  & span {\r\n    cursor: pointer;\r\n  }\r\n`;\r\n\r\nconst ListContainer = styled.div`\r\n  height: fit-content;\r\n  margin-bottom: 20px;\r\n`;\r\n\r\ninterface RightSideProps {\r\n  selectedId: number;\r\n  onClose: () => void;\r\n  onChangeState: (id: number, state: TodoState) => void;\r\n}\r\n\r\nconst RightSide: FC<RightSideProps> = ({\r\n  selectedId,\r\n  onClose,\r\n  onChangeState,\r\n}) => {\r\n  const { todoMap } = todoList;\r\n\r\n  const currentItem = useMemo(\r\n    () => (selectedId ? todoMap[selectedId] : null),\r\n    [selectedId, todoMap]\r\n  );\r\n\r\n  const { title, state, priority, steps, lastChanged, description } =\r\n    currentItem!;\r\n\r\n  const onUpdateTitle = useCallback(\r\n    (title) => {\r\n      todoList.updateItem(selectedId, { title });\r\n    },\r\n    [selectedId]\r\n  );\r\n\r\n  const onAddStep = useCallback(\r\n    (title) => {\r\n      todoList.updateItem(selectedId, {\r\n        steps: steps.concat({\r\n          id: steps.length + 1,\r\n          priority: false,\r\n          title,\r\n          state: TodoState.InProgress,\r\n        }),\r\n      });\r\n\r\n      return true;\r\n    },\r\n    [selectedId, steps]\r\n  );\r\n\r\n  const onRemoveStep = useCallback(\r\n    (stepId: number) => {\r\n      todoList.updateItem(selectedId, {\r\n        steps: steps.filter(({ id }) => id !== stepId),\r\n      });\r\n    },\r\n    [selectedId, steps]\r\n  );\r\n\r\n  const onEditStepTitle = useCallback(\r\n    (stepId) => (title: string) => {\r\n      const index = steps.findIndex(({ id }) => id === stepId);\r\n      const newSteps = [...steps];\r\n\r\n      if (newSteps[index].title === title) {\r\n        return;\r\n      }\r\n\r\n      newSteps[index].title = title;\r\n\r\n      todoList.updateItem(selectedId, {\r\n        steps: newSteps,\r\n      });\r\n    },\r\n    [steps, selectedId]\r\n  );\r\n\r\n  const onEditStepState = useCallback(\r\n    (stepId) => () => {\r\n      const index = steps.findIndex(({ id }) => id === stepId);\r\n      const newSteps = [...steps];\r\n      const state =\r\n        newSteps[index].state === TodoState.Done\r\n          ? TodoState.InProgress\r\n          : TodoState.Done;\r\n\r\n      if (newSteps[index].state === state) {\r\n        return;\r\n      }\r\n\r\n      newSteps[index].state = state;\r\n\r\n      todoList.updateItem(selectedId, {\r\n        steps: newSteps,\r\n      });\r\n    },\r\n    [selectedId, steps]\r\n  );\r\n\r\n  const isDone = state === TodoState.Done;\r\n\r\n  return (\r\n    <Container>\r\n      <ScrollContainer>\r\n        <TitleContainer>\r\n          <span\r\n            className=\"hover-icon flex-block\"\r\n            onClick={() =>\r\n              onChangeState(\r\n                selectedId,\r\n                isDone ? TodoState.InProgress : TodoState.Done\r\n              )\r\n            }\r\n          >\r\n            <TodoIcon state={state} hovered />\r\n          </span>\r\n          <h4>\r\n            <EditableTitle onSave={onUpdateTitle}>{title}</EditableTitle>\r\n          </h4>\r\n          <span\r\n            className=\"hover-icon flex-block\"\r\n            onClick={() =>\r\n              todoList.updateItem(selectedId, { priority: !priority })\r\n            }\r\n          >\r\n            <Star filled={priority} />\r\n          </span>\r\n        </TitleContainer>\r\n\r\n        <ListContainer>\r\n          <TodoList addPlaceholder=\"Add step\" onAddItem={onAddStep}>\r\n            {steps.map(({ id, title, state }) => (\r\n              <TodoListItem\r\n                key={id}\r\n                icon={\r\n                  <span\r\n                    className=\"hover-icon\"\r\n                    title={\r\n                      state === TodoState.InProgress\r\n                        ? \"Mark as done\"\r\n                        : \"Move back to in progress\"\r\n                    }\r\n                    onClick={onEditStepState(id)}\r\n                  >\r\n                    <TodoIcon state={state} hovered />\r\n                  </span>\r\n                }\r\n                postfix={\r\n                  <span\r\n                    title=\"Remove step\"\r\n                    className=\"hover-icon centered-span\"\r\n                    onClick={() => onRemoveStep(id)}\r\n                  >\r\n                    <CloseIcon className=\"icon-14\" />\r\n                  </span>\r\n                }\r\n              >\r\n                <EditableTitle onSave={onEditStepTitle(id)}>\r\n                  {title}\r\n                </EditableTitle>\r\n              </TodoListItem>\r\n            ))}\r\n          </TodoList>\r\n        </ListContainer>\r\n\r\n        <DescriptionTextarea\r\n          placeholder=\"Add notes\"\r\n          onEdit={(description) =>\r\n            todoList.updateItem(selectedId, { description })\r\n          }\r\n          value={description}\r\n        />\r\n      </ScrollContainer>\r\n\r\n      <FlexboxGrid\r\n        className=\"full-width p-10 b-top\"\r\n        align=\"middle\"\r\n        justify=\"space-between\"\r\n      >\r\n        <FlexboxGrid.Item>\r\n          <IconButton\r\n            icon={<ArrowRightIcon />}\r\n            appearance=\"subtle\"\r\n            onClick={onClose}\r\n            title=\"Close frame\"\r\n          />\r\n        </FlexboxGrid.Item>\r\n        <FlexboxGrid.Item className=\"align-center\">\r\n          {lastChanged\r\n            ? `last changed ${formatDistance(lastChanged!, new Date(), {\r\n                includeSeconds: true,\r\n              })} ago`\r\n            : \"Not updated\"}\r\n        </FlexboxGrid.Item>\r\n        <FlexboxGrid.Item>\r\n          <IconButton\r\n            onClick={() => {\r\n              onClose();\r\n              todoList.removeItem(selectedId);\r\n            }}\r\n            className=\"delete-button\"\r\n            icon={<TrashIcon />}\r\n            appearance=\"subtle\"\r\n            title=\"Delete task\"\r\n          />\r\n        </FlexboxGrid.Item>\r\n      </FlexboxGrid>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default RightSide;\r\n","import { observer } from \"mobx-react-lite\";\r\nimport { FC, useCallback, useMemo, useState } from \"react\";\r\nimport {\r\n  Button,\r\n  ButtonGroup,\r\n  ButtonToolbar,\r\n  Container,\r\n  Content,\r\n  Dropdown,\r\n  FlexboxGrid,\r\n  IconButton,\r\n} from \"rsuite\";\r\nimport styled from \"styled-components\";\r\n// import Picker from \"emoji-picker-react\";\r\nimport { ItemsFilter, TodoListFilter } from \"../types\";\r\nimport RightSide from \"./RightSide\";\r\n\r\nimport MoreIcon from \"@rsuite/icons/More\";\r\nimport { TodoList, TodoListItem } from \"./todo-list\";\r\nimport TodoIcon from \"./todo-list/TodoIcon\";\r\nimport { TodoState } from \"../../../types/todo-list\";\r\nimport Star from \"../../../icons/Star\";\r\nimport { pageView, todoList } from \"../../../store\";\r\nimport { ContextMenu, MenuItem } from \"react-contextmenu\";\r\nimport { ChangeTodoFilterHandler } from \"../utils/useTodoListFilter\";\r\n\r\nconst StyledContent = styled(Content)`\r\n  height: 100vh;\r\n  padding: 20px 30px;\r\n`;\r\n\r\nconst Title = styled.h3`\r\n  color: var(--rs-sidenav-subtle-selected-text);\r\n`;\r\n\r\nconst ListContainer = styled.div`\r\n  border-radius: 20px;\r\n  margin-top: 20px;\r\n  height: calc(100vh - 100px);\r\n`;\r\n\r\nconst StepsState = styled.div`\r\n  font-size: 10px;\r\n  color: var(--rs-gray-200);\r\n`;\r\n\r\ninterface TodoListContentProps {\r\n  filter: TodoListFilter;\r\n  changeFilter: ChangeTodoFilterHandler;\r\n}\r\n\r\nconst TodoListContent: FC<TodoListContentProps> = ({\r\n  filter: { group, filter },\r\n  changeFilter,\r\n}) => {\r\n  const [selectedId, setSelectedId] = useState<number | null>(null);\r\n\r\n  const { itemsMapForGroups } = todoList;\r\n\r\n  const itemsMap = useMemo(() => {\r\n    const items = itemsMapForGroups[group] || [];\r\n\r\n    return {\r\n      [ItemsFilter.Done]: items.filter(({ state }) => state === TodoState.Done),\r\n      [ItemsFilter.InProgress]: items.filter(\r\n        ({ state }) => state === TodoState.InProgress\r\n      ),\r\n      [ItemsFilter.All]: items,\r\n    };\r\n  }, [itemsMapForGroups, group]);\r\n\r\n  const onCloseRightSide = useCallback(\r\n    () => setSelectedId(null),\r\n    [setSelectedId]\r\n  );\r\n\r\n  const [center, right] = useMemo(\r\n    () => (selectedId ? [16, 8] : [24, 0]),\r\n    [selectedId]\r\n  );\r\n\r\n  const onAddItem = useCallback(\r\n    (title: string) => {\r\n      todoList\r\n        .addItem({\r\n          groupId: group as number,\r\n          description: \"\",\r\n          orderIndex: null,\r\n          state: TodoState.InProgress,\r\n          steps: [],\r\n          title,\r\n          type: 0,\r\n          userId: pageView.currentUserId,\r\n        })\r\n        .then(({ id }) => setSelectedId(id));\r\n\r\n      return true;\r\n    },\r\n    [group]\r\n  );\r\n\r\n  const onChangeState = useCallback((todoId: number, newState: TodoState) => {\r\n    todoList.updateItem(todoId, { state: newState });\r\n  }, []);\r\n\r\n  const onRemoveItem = useCallback(\r\n    (_target, _data, context) => {\r\n      const id = Number(context.parentElement?.dataset?.uid);\r\n\r\n      onCloseRightSide();\r\n      todoList.removeItem(id);\r\n    },\r\n    [onCloseRightSide]\r\n  );\r\n\r\n  const onChangeItemsFilter = useCallback(\r\n    (value) => () => changeFilter({ filter: value }),\r\n    [changeFilter]\r\n  );\r\n\r\n  return (\r\n    <Container>\r\n      <ContextMenu id=\"same_unique_identifier\" style={{ zIndex: 10 }}>\r\n        <Dropdown.Menu>\r\n          <MenuItem onClick={onRemoveItem}>\r\n            <Dropdown.Item className=\"delete-button\">Delete</Dropdown.Item>\r\n          </MenuItem>\r\n        </Dropdown.Menu>\r\n      </ContextMenu>\r\n\r\n      <FlexboxGrid>\r\n        <FlexboxGrid.Item colspan={center}>\r\n          <StyledContent>\r\n            <FlexboxGrid align=\"middle\" justify=\"space-between\">\r\n              <FlexboxGrid.Item>\r\n                <Title>title</Title>\r\n              </FlexboxGrid.Item>\r\n              <FlexboxGrid.Item>\r\n                <ButtonToolbar>\r\n                  <ButtonGroup size=\"sm\">\r\n                    <Button\r\n                      active={filter === ItemsFilter.All}\r\n                      onClick={onChangeItemsFilter(ItemsFilter.All)}\r\n                      appearance=\"subtle\"\r\n                    >\r\n                      All ({itemsMap[ItemsFilter.All].length})\r\n                    </Button>\r\n                    <Button\r\n                      active={filter === ItemsFilter.Done}\r\n                      onClick={onChangeItemsFilter(ItemsFilter.Done)}\r\n                      appearance=\"subtle\"\r\n                    >\r\n                      Done ({itemsMap[ItemsFilter.Done].length})\r\n                    </Button>\r\n                    <Button\r\n                      active={filter === ItemsFilter.InProgress}\r\n                      onClick={onChangeItemsFilter(ItemsFilter.InProgress)}\r\n                      appearance=\"subtle\"\r\n                    >\r\n                      In progress ({itemsMap[ItemsFilter.InProgress].length})\r\n                    </Button>\r\n                  </ButtonGroup>\r\n\r\n                  <IconButton icon={<MoreIcon />} size=\"sm\" />\r\n                </ButtonToolbar>\r\n              </FlexboxGrid.Item>\r\n            </FlexboxGrid>\r\n\r\n            <ListContainer>\r\n              <TodoList onAddItem={onAddItem}>\r\n                {itemsMap[filter].map(\r\n                  ({ id, priority, title, state, steps }) => (\r\n                    <TodoListItem\r\n                      active={selectedId === id}\r\n                      onClick={() => setSelectedId(id)}\r\n                      key={id}\r\n                      contextMenuUId={id}\r\n                      contextMenuId=\"same_unique_identifier\"\r\n                      icon={\r\n                        <span\r\n                          onClick={(event) => {\r\n                            event.stopPropagation();\r\n\r\n                            const newValue =\r\n                              state === TodoState.InProgress\r\n                                ? TodoState.Done\r\n                                : TodoState.InProgress;\r\n\r\n                            onChangeState(id, newValue);\r\n                          }}\r\n                          className=\"hover-icon centered-span\"\r\n                          title={\r\n                            state === TodoState.InProgress\r\n                              ? \"Mark as done\"\r\n                              : \"Move back to in progress\"\r\n                          }\r\n                        >\r\n                          <TodoIcon state={state} hovered />\r\n                        </span>\r\n                      }\r\n                      postfix={\r\n                        <span\r\n                          onClick={(event) => {\r\n                            event.stopPropagation();\r\n\r\n                            todoList.updateItem(id, {\r\n                              priority: !priority,\r\n                            });\r\n                          }}\r\n                          title=\"Mark as important\"\r\n                          className=\"hover-icon centered-span\"\r\n                        >\r\n                          <Star filled={priority} />\r\n                        </span>\r\n                      }\r\n                    >\r\n                      <div>{title}</div>\r\n                      {steps.length > 0 &&\r\n                        (() => {\r\n                          const completedCount = steps.filter(\r\n                            ({ state }) => state === TodoState.Done\r\n                          ).length;\r\n\r\n                          return (\r\n                            <StepsState>\r\n                              {completedCount === steps.length && (\r\n                                <span>&#10004; </span>\r\n                              )}\r\n                              {completedCount} of {steps.length}\r\n                            </StepsState>\r\n                          );\r\n                        })()}\r\n                    </TodoListItem>\r\n                  )\r\n                )}\r\n              </TodoList>\r\n            </ListContainer>\r\n          </StyledContent>\r\n        </FlexboxGrid.Item>\r\n        {selectedId && (\r\n          <FlexboxGrid.Item colspan={right}>\r\n            <RightSide\r\n              selectedId={selectedId}\r\n              onClose={onCloseRightSide}\r\n              onChangeState={onChangeState}\r\n            />\r\n          </FlexboxGrid.Item>\r\n        )}\r\n      </FlexboxGrid>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default observer(TodoListContent);\r\n","import { Content, FlexboxGrid } from \"rsuite\";\r\nimport TodoGroupControl from \"../components/TodoGroupControl\";\r\nimport TodoListContent from \"../components/TodoListContent\";\r\nimport { useTodoListFilter } from \"../utils/useTodoListFilter\";\r\n\r\nconst TodoList = () => {\r\n  const { filter, onChange } = useTodoListFilter();\r\n\r\n  // const filteredItems = useMemo(() => {}, []);\r\n\r\n  return (\r\n    <>\r\n      <Content>\r\n        <FlexboxGrid className=\"full-height\">\r\n          <FlexboxGrid.Item className=\"full-height\" colspan={4}>\r\n            <TodoGroupControl\r\n              activeKey={filter.group}\r\n              changeActiveGroup={(group) => onChange({ group })}\r\n            />\r\n          </FlexboxGrid.Item>\r\n          <FlexboxGrid.Item colspan={20}>\r\n            <TodoListContent filter={filter} changeFilter={onChange} />\r\n          </FlexboxGrid.Item>\r\n        </FlexboxGrid>\r\n      </Content>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TodoList;\r\n","import { parse, stringify } from \"query-string\";\r\nimport { useCallback, useMemo } from \"react\";\r\nimport { useHistory, useLocation } from \"react-router\";\r\nimport { TodoDefaultListGroup } from \"../../../enums/todo-list\";\r\nimport { ItemsFilter, TodoListFilter } from \"../types\";\r\n\r\nexport type ChangeTodoFilterHandler = (values: Partial<TodoListFilter>) => void;\r\n\r\ninterface ReturnValue {\r\n  filter: TodoListFilter;\r\n  onChange: ChangeTodoFilterHandler;\r\n}\r\n\r\nexport const useTodoListFilter = (): ReturnValue => {\r\n  const { search } = useLocation();\r\n  const history = useHistory();\r\n\r\n  const filter = useMemo(() => {\r\n    const {\r\n      group = String(TodoDefaultListGroup.All),\r\n      filter = String(ItemsFilter.All),\r\n    } = parse(search);\r\n\r\n    return {\r\n      group: Number(group),\r\n      filter: Number(filter),\r\n    };\r\n  }, [search]);\r\n\r\n  const onChange = useCallback(\r\n    (newValue) =>\r\n      history.replace({ search: stringify({ ...filter, ...newValue }) }),\r\n    [filter, history]\r\n  );\r\n\r\n  return { filter, onChange };\r\n};\r\n","import { Switch, Route, Redirect } from \"react-router-dom\";\r\n\r\nimport { routes } from \"../helpers/router\";\r\n\r\nimport { Error404 } from \"./service\";\r\n\r\nimport { TodoList } from \"./todo-list\";\r\n\r\nconst Routes = () => (\r\n  <Switch>\r\n    <Route exact path={routes.ROOT} component={() => <Redirect to={routes.TODO_LIST}/>} />\r\n\r\n    <Route exact path={routes.LOGIN} component={() => <div>1</div>} />\r\n\r\n    <Route exact path={routes.REGISTRATION} component={() => <div>1</div>} />\r\n\r\n    <Route exact path={routes.TODO_LIST} component={TodoList} />\r\n\r\n    <Route path=\"*\" component={Error404} />\r\n  </Switch>\r\n);\r\n\r\nexport default Routes;\r\n","import { FC } from \"react\";\nimport {\n  Container,\n  Nav,\n  Sidebar,\n  Sidenav,\n  CustomProvider,\n  FlexboxGrid,\n  IconButton,\n  IconButtonProps,\n  Avatar,\n  Dropdown,\n} from \"rsuite\";\nimport styled from \"styled-components\";\nimport { observer } from \"mobx-react-lite\";\nimport { Link, useLocation } from \"react-router-dom\";\n\nimport TaskIcon from \"@rsuite/icons/Task\";\nimport ParagraphIcon from \"@rsuite/icons/Paragraph\";\nimport LogoIcon from \"@rsuite/icons/AppSelect\";\nimport CharacterLockIcon from \"@rsuite/icons/CharacterLock\";\nimport ArrowLeftIcon from \"@rsuite/icons/ArrowLeft\";\nimport ArrowRightIcon from \"@rsuite/icons/ArrowRight\";\n\nimport Routes from \"./pages\";\nimport { pageView, user } from \"./store\";\nimport { routes } from \"./helpers/router\";\n\nimport \"rsuite/dist/rsuite.min.css\";\nimport \"./styles.css\";\n\nconst LogoContainer = styled.div`\n  padding: 20px;\n\n  & svg {\n    width: 24px;\n    height: auto;\n  }\n\n  & svg[data-expanded=\"false\"] {\n    width: 20px;\n  }\n`;\n\nconst LogoTitle = styled.span`\n  font-size: 20px;\n  margin-left: 10px;\n  transition: display 1s linear;\n\n  &[data-expanded=\"false\"] {\n    display: none;\n  }\n`;\n\nconst StyledSidebar = styled(Sidebar)`\n  position: relative;\n  border-right: 1px solid var(--rs-divider-border);\n`;\n\nconst TogglerButton = styled(IconButton)`\n  position: absolute;\n  right: -12px;\n  bottom: 80px;\n  z-index: 10;\n`;\n\nconst UserAvatar = styled(Avatar)`\n  margin-right: 20px;\n  position: absolute;\n  left: 18px;\n  top: 15px;\n`;\n\nconst ExpandedToggler: FC<IconButtonProps & { expanded: boolean }> = ({\n  expanded,\n  onClick,\n}) => (\n  <TogglerButton\n    icon={expanded ? <ArrowLeftIcon /> : <ArrowRightIcon />}\n    size=\"xs\"\n    circle\n    onClick={onClick}\n    appearance=\"primary\"\n  />\n);\n\nconst App = () => {\n  const { pathname } = useLocation();\n\n  return (\n    <CustomProvider theme=\"dark\">\n      <Container>\n        <StyledSidebar\n          width={pageView.expandedSideBar ? 220 : 56}\n          collapsible\n          className=\"flex-column\"\n        >\n          <Sidenav.Header>\n            <LogoContainer>\n              <FlexboxGrid align=\"middle\">\n                <FlexboxGrid.Item>\n                  <LogoIcon data-expanded={pageView.expandedSideBar} />\n                </FlexboxGrid.Item>\n                <FlexboxGrid.Item>\n                  <LogoTitle data-expanded={pageView.expandedSideBar}>\n                    You manager\n                  </LogoTitle>\n                </FlexboxGrid.Item>\n              </FlexboxGrid>\n            </LogoContainer>\n          </Sidenav.Header>\n          <Sidenav\n            className=\"flex-column flex-auto\"\n            expanded={pageView.expandedSideBar}\n            appearance=\"subtle\"\n          >\n            <Sidenav.Body className=\"flex-column flex-auto\">\n              <Nav className=\"flex-auto\" activeKey={pathname}>\n                <Nav.Item\n                  eventKey={routes.TODO_LIST}\n                  icon={<TaskIcon />}\n                  as={Link}\n                  to={routes.TODO_LIST}\n                >\n                  Todo\n                </Nav.Item>\n\n                <Nav.Item\n                  eventKey={routes.NOTES}\n                  icon={<ParagraphIcon />}\n                  as={Link}\n                  to={routes.NOTES}\n                >\n                  Notes\n                </Nav.Item>\n\n                <Nav.Item\n                  eventKey={routes.PASSWORDS}\n                  icon={<CharacterLockIcon />}\n                  as={Link}\n                  to={routes.PASSWORDS}\n                >\n                  Passwords\n                </Nav.Item>\n              </Nav>\n              <Nav activeKey={pathname}>\n                <Dropdown\n                  placement=\"rightEnd\"\n                  activeKey={pathname}\n                  title={user.username}\n                  icon={\n                    <UserAvatar size=\"xs\">{user.usernameSymbols}</UserAvatar>\n                  }\n                >\n                  <Dropdown.Item>Profile</Dropdown.Item>\n                  <Dropdown.Item\n                    eventKey={routes.SETTINGS}\n                    as={Link}\n                    to={routes.SETTINGS}\n                  >\n                    Settings\n                  </Dropdown.Item>\n\n                  <Dropdown.Item divider />\n\n                  <Dropdown.Item\n                    eventKey={routes.SETTINGS}\n                    as={Link}\n                    to={routes.SETTINGS}\n                  >\n                    Change user\n                  </Dropdown.Item>\n                </Dropdown>\n              </Nav>\n            </Sidenav.Body>\n            <ExpandedToggler\n              expanded={pageView.expandedSideBar}\n              onClick={pageView.toggleExpanded}\n            />\n          </Sidenav>\n        </StyledSidebar>\n\n        <Container>\n          <Routes />\n        </Container>\n      </Container>\n    </CustomProvider>\n  );\n};\n\nexport default observer(App);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { HashRouter } from \"react-router-dom\";\n\nimport App from \"./App\";\n\nReactDOM.render(\n  <HashRouter>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </HashRouter>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}